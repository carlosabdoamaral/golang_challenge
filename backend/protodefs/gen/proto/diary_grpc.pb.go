// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: diary.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiaryServiceClient is the client API for DiaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiaryServiceClient interface {
	NewDiary(ctx context.Context, in *NewDiaryRequest, opts ...grpc.CallOption) (*NewDiaryResponse, error)
}

type diaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiaryServiceClient(cc grpc.ClientConnInterface) DiaryServiceClient {
	return &diaryServiceClient{cc}
}

func (c *diaryServiceClient) NewDiary(ctx context.Context, in *NewDiaryRequest, opts ...grpc.CallOption) (*NewDiaryResponse, error) {
	out := new(NewDiaryResponse)
	err := c.cc.Invoke(ctx, "/main.DiaryService/NewDiary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiaryServiceServer is the server API for DiaryService service.
// All implementations must embed UnimplementedDiaryServiceServer
// for forward compatibility
type DiaryServiceServer interface {
	NewDiary(context.Context, *NewDiaryRequest) (*NewDiaryResponse, error)
	mustEmbedUnimplementedDiaryServiceServer()
}

// UnimplementedDiaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiaryServiceServer struct {
}

func (UnimplementedDiaryServiceServer) NewDiary(context.Context, *NewDiaryRequest) (*NewDiaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDiary not implemented")
}
func (UnimplementedDiaryServiceServer) mustEmbedUnimplementedDiaryServiceServer() {}

// UnsafeDiaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiaryServiceServer will
// result in compilation errors.
type UnsafeDiaryServiceServer interface {
	mustEmbedUnimplementedDiaryServiceServer()
}

func RegisterDiaryServiceServer(s grpc.ServiceRegistrar, srv DiaryServiceServer) {
	s.RegisterService(&DiaryService_ServiceDesc, srv)
}

func _DiaryService_NewDiary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDiaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).NewDiary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.DiaryService/NewDiary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).NewDiary(ctx, req.(*NewDiaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiaryService_ServiceDesc is the grpc.ServiceDesc for DiaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.DiaryService",
	HandlerType: (*DiaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewDiary",
			Handler:    _DiaryService_NewDiary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diary.proto",
}
